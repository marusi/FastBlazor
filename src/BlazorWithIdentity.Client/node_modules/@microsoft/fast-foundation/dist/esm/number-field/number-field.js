import { __decorate } from "tslib";
import { attr, DOM, nullableNumberConverter, observable, } from "@microsoft/fast-element";
import { keyArrowDown, keyArrowUp } from "@microsoft/fast-web-utilities";
import { StartEnd } from "../patterns/index";
import { applyMixins } from "../utilities/index";
import { DelegatesARIATextbox } from "../text-field/index";
import { FormAssociatedNumberField } from "./number-field.form-associated";
/**
 * A Number Field Custom HTML Element.
 * Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number | <input type="number" /> element }.
 *
 * @public
 */
export class NumberField extends FormAssociatedNumberField {
    constructor() {
        super(...arguments);
        /**
         * When true, spin buttons will not be rendered
         * @public
         * @remarks
         * HTML Attribute: autofocus
         */
        this.hideStep = false;
        /**
         * Amount to increment or decrement the value by
         * @public
         * @remarks
         * HTMLAttribute: step
         */
        this.step = 1;
        /**
         * Display text used in the input field
         * @public
         */
        this.displayText = "";
    }
    maxChanged(previousValue, nextValue) {
        const numb = parseFloat(nextValue);
        if (numb !== undefined) {
            if (this.min !== undefined && numb < this.min) {
                this.max = this.min;
                this.min = numb;
            }
            else {
                this.max = numb;
            }
        }
        this.updateValue(this.value);
    }
    minChanged(previousValue, nextValue) {
        const numb = parseFloat(nextValue);
        if (numb !== undefined) {
            if (this.max !== undefined && numb > this.max) {
                this.min = this.max;
                this.max = numb;
            }
            else {
                this.min = numb;
            }
        }
        this.updateValue(this.value);
    }
    /**
     *
     * @param previousValue - previous stored value
     * @param nextValue - value being updated
     */
    valueChanged(previousValue, nextValue) {
        super.valueChanged(previousValue, nextValue);
        this.updateValue(nextValue);
    }
    /**
     * Updates the value. Validates that it's a number, between the min
     *  and max, updates the proxy and emits events.
     *
     * @param value - value to be validated
     * @internal
     */
    updateValue(value) {
        if (value === "" || isNaN(parseFloat(value))) {
            value = "";
        }
        else {
            value = parseFloat(value);
            if (this.min !== undefined && value < this.min) {
                value = this.min;
            }
            else if (this.max !== undefined && value > this.max) {
                value = this.max;
            }
            value = parseFloat(value.toPrecision(12));
        }
        if (this.proxy instanceof HTMLInputElement) {
            this.proxy.value = value;
        }
        if (value != this.value) {
            this.value = value.toString();
            this.$emit("input");
            this.$emit("change");
        }
    }
    /**
     * Increments the value using the step value
     *
     * @public
     */
    stepUp() {
        const stepUpValue = this.step + (parseFloat(this.value) || 0);
        this.updateValue(stepUpValue);
    }
    /**
     * Decrements the value using the step value
     *
     * @public
     */
    stepDown() {
        const stepDownValue = (parseFloat(this.value) || 0) - this.step;
        this.updateValue(stepDownValue);
    }
    /**
     * @internal
     */
    connectedCallback() {
        super.connectedCallback();
        this.displayText = this.value;
        this.proxy.setAttribute("type", "number");
        this.validate();
        if (this.autofocus) {
            DOM.queueUpdate(() => {
                this.focus();
            });
        }
    }
    /**
     * Handles the internal control's `input` event
     * @internal
     */
    handleTextInput() {
        this.value = this.control.value;
    }
    /**
     * Change event handler for inner control.
     * @remarks
     * "Change" events are not `composable` so they will not
     * permeate the shadow DOM boundary. This fn effectively proxies
     * the change event, emitting a `change` event whenever the internal
     * control emits a `change` event
     * @internal
     */
    handleChange() {
        this.$emit("change");
    }
    /**
     * Handles the internal control's `keydown` event
     * @internal
     */
    handleKeyDown(e) {
        const key = e.key;
        switch (key) {
            case keyArrowUp:
                this.stepUp();
                return false;
            case keyArrowDown:
                this.stepDown();
                return false;
        }
        return true;
    }
}
__decorate([
    attr({ attribute: "readonly", mode: "boolean" })
], NumberField.prototype, "readOnly", void 0);
__decorate([
    attr({ mode: "boolean" })
], NumberField.prototype, "autofocus", void 0);
__decorate([
    attr({ attribute: "hide-step", mode: "boolean" })
], NumberField.prototype, "hideStep", void 0);
__decorate([
    attr
], NumberField.prototype, "placeholder", void 0);
__decorate([
    attr
], NumberField.prototype, "list", void 0);
__decorate([
    attr({ converter: nullableNumberConverter })
], NumberField.prototype, "maxlength", void 0);
__decorate([
    attr({ converter: nullableNumberConverter })
], NumberField.prototype, "minlength", void 0);
__decorate([
    attr({ converter: nullableNumberConverter })
], NumberField.prototype, "size", void 0);
__decorate([
    attr({ converter: nullableNumberConverter })
], NumberField.prototype, "step", void 0);
__decorate([
    attr({ converter: nullableNumberConverter })
], NumberField.prototype, "max", void 0);
__decorate([
    attr({ converter: nullableNumberConverter })
], NumberField.prototype, "min", void 0);
__decorate([
    observable
], NumberField.prototype, "displayText", void 0);
__decorate([
    observable
], NumberField.prototype, "defaultSlottedNodes", void 0);
applyMixins(NumberField, StartEnd, DelegatesARIATextbox);
