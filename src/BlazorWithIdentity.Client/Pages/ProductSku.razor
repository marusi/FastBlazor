@page "/productsku"

@attribute [Authorize]

@inject IdentityAuthenticationStateProvider authStateProvider

@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@inject HttpClient Http
@using BlazorWithIdentity.Shared.DTO.Category
@using BlazorWithIdentity.Shared.DTO.OptionValue
@using BlazorWithIdentity.Shared.DTO.Product
@using BlazorWithIdentity.Shared.DTO.ProductSku
@using BlazorWithIdentity.Shared.DTO.SkuValue

 <FluentDesignSystemProvider>
 <div class="row">
 <div class="container">
   <h6>Price </h6>
   <div class="col-md-12">
    <FluentCard  style="height:50%">  
    
   
      @if (productSkus == null)
         {
            
             <FluentProgressRing></FluentProgressRing>
               
          }
        
         else
         {
            
                 
                            <div class="row">
                              <EditForm class="form-category" OnValidSubmit="OnSubmit" Model="saveProductSkuDTO">
                                  <div class="col-md-24">
                                      <div class="col-md-12">
                                          <p>Choose Category</p>
                                        @if (testValue == null) { }
                                        else { 
                                            int bindValue;
                                            int.TryParse(testValue, out bindValue);
                                            saveProductSkuDTO.SkuValueId = bindValue;
                                        }   
                                        <FluentSelect  class="form-control" id="optionValue" @bind-Value="testValue">
                                                  
                                                    @foreach (var item in skuValues)
                                                    {
                                                       
                                                      
                                                     <FluentOption Value="@item.Id.ToString()">
                                                         @item.OptionValue.Option.Product.ProductName
                                                         @item.OptionValue.OptionValueName  @item.SkuValueName 
                                                         
                                                         </FluentOption>

                                                     
                                                }
                                                </FluentSelect>
                                               
                                                <br/>
                                      </div>
                                      <div class="col-md-12"></div>
                                     
                                  </div> 
                                  
                                  <div class="col-md-12">
                                       
                                              
                                                   
                                                        <input id="inputCategory" type="number" class="form-control"  @bind="saveProductSkuDTO.Price"  placeholder="Price"  />
                                                            <ValidationMessage class="text-danger" For="@(() => saveProductSkuDTO.Price)" />

                                                     </div>
                                                     <div class="col-md-12">
                                                        <FluentButton type="submit" Appearance="Appearance.Accent">Submit</FluentButton>
                                                    
                                                      <label class="text-danger">@error</label> 
                                                 </div>
                                         
                                   </EditForm>
                           </div>
                      <FluentDataGrid id="manualGrid" GenerateHeader=GenerateHeaderOptions.None GridTemplateColumns="1fr 1fr" TItem=string>
                      <FluentDataGridRow TItem=string RowType="DataGridRowType.Header">
                       <FluentDataGridCell GridColumn=1 CellType="DataGridCellType.ColumnHeader">Description</FluentDataGridCell>
                       <FluentDataGridCell GridColumn=2 CellType="DataGridCellType.ColumnHeader">Price</FluentDataGridCell>
                        <FluentDataGridCell GridColumn=3 CellType="DataGridCellType.ColumnHeader">Edit</FluentDataGridCell>
                        <FluentDataGridCell GridColumn=4 CellType="DataGridCellType.ColumnHeader">Delete</FluentDataGridCell>
                      </FluentDataGridRow>
                      @foreach (var item in productSkus.Items)
                        {

                            <FluentDataGridRow TItem=string>
                            <FluentDataGridCell GridColumn=1>
                               <FluentBreadcrumb>
                                    <FluentBreadcrumbItem>@item.SkuValue.SkuValueName</FluentBreadcrumbItem>
                                    <FluentBreadcrumbItem>@item.SkuValue.OptionValue.OptionValueName</FluentBreadcrumbItem>
                                    <FluentBreadcrumbItem>@item.SkuValue.OptionValue.Option.Product.ProductName</FluentBreadcrumbItem>
                                   
                                    </FluentBreadcrumb>

                                     </FluentDataGridCell>
                            <FluentDataGridCell GridColumn=2>KES @item.Price</FluentDataGridCell>
                            <FluentDataGridCell GridColumn=3>   <FluentAnchor  Href="@($"productskudata/{item.Id}")" Appearance="Appearance.Stealth"><span style="color:green;" class="glyph glyph-edit"></span></FluentAnchor>    </FluentDataGridCell>
                              <FluentDataGridCell GridColumn=4>  <FluentButton type="submit"   @onclick="(() => DeleteProductSku(item.Id))" Appearance="Appearance.Stealth"><span style="color:red;" class="glyph glyph-delete"></span></FluentButton></FluentDataGridCell>
                                </FluentDataGridRow>
                          }
                      </FluentDataGrid>
                               
               
                

}
             </FluentCard>

     </div>
     <div class="col-md-12"> </div>
 </div>
 </div>
  </FluentDesignSystemProvider>

@code{

    // private SuccessNotification _notification;

     [Parameter]
    public int Id { get; set; }
    SaveProductSkuDTO saveProductSkuDTO { get; set; } = new SaveProductSkuDTO();
    string error { get; set; }

    ProductSkuDTO productSkuValueDTO { get; set; } = new ProductSkuDTO();
    ProductSkuQueryDTO query { get; set; } = new ProductSkuQueryDTO();
   
     [Inject]
    public IProductSkuDataService ProductSkuDataService { get; set; }

      [Inject]
    public ISkuValueDataService SkuValueDataService { get; set; }

    async Task OnSubmit()
    {
        error = null;
        try
        {
            await ProductSkuDataService.CreateProductSku(saveProductSkuDTO);
            toastService.ShowToast($"{saveProductSkuDTO.Price} added Succesfuly", ToastLevel.Success);
            StateHasChanged();
             await OnInitializedAsync();
            navigationManager.NavigateTo("/product");
            
           

        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
  

  

  @functions {


       private QueryResultDTO<ProductSkuDTO> productSkus { get; set; }
        private SkuValueDTO[] skuValues { get; set; }
        private string testValue = "";
        string empty = "";

    protected override async Task OnInitializedAsync()
    {
        
       productSkus = await ProductSkuDataService.GetProductSkus(empty);
       skuValues = await SkuValueDataService.GetSkuValues();


      // toastService.ShowToast($"Items loaded succesfuly", ToastLevel.Info);
    }

    protected async Task DeleteProductSku(int Id)
        {
          await ProductSkuDataService.DeleteProductSku(Id);
          toastService.ShowToast($"Item({Id}) deleted succesfuly", ToastLevel.Success);
            StateHasChanged();
            await OnInitializedAsync();
            //  StatusClass = "alert-success";
          //  Message = "Deleted successfully";

           // Saved = true;
        }

 
  }


     




}

 
