@page "/productdata/{Id:int}"
@attribute [Authorize]
@using BlazorWithIdentity.Shared
@inject HttpClient Http
@using BlazorWithIdentity.Shared.DTO.Category
@using BlazorWithIdentity.Shared.DTO.Product

<FluentDesignSystemProvider>
<div class="row row-sm">
<div class="container">
      <h6>Edit Product Name</h6>
    <FluentCard style="height:100%">
  
 <EditForm class="form-category" OnValidSubmit="OnSubmitProduct" Model="productItem">
     
     
          <FluentAnchor  Href="@($"product")" Appearance="Appearance.Stealth"><span style="color:green;" class="glyph glyph-back"></span></FluentAnchor> 
     
         
      <div class="col-md-24">
           @if(categories == null) 
          {
              <p><a href="/category">Insert</a> a new category </p>
          } else {
             
               @if (testValue == null) { } else
                                                {
                                                    int bindValue;
                                                    int.TryParse(testValue, out bindValue);
                                                    saveProductDTO.ProductCategoryId = bindValue;
                                                }
                                                <FluentSelect  class="form-control" id="category" @bind-Value="testValue">
                                                  
                                                    @foreach (var item in categories)
                                                    {
                                                        <FluentOption Value="@item.Id.ToString()">@item.Name</FluentOption>
                                                    }
                                                </FluentSelect>
                                                 
           }

      </div>
      <div class="col-md-24">
          <FluentTextField id="inputCategory"  @bind-Value="saveProductDTO.ProductName"  placeholder="@productItem.ProductName"  ></FluentTextField>
                    <ValidationMessage class="text-danger" For="@(() => saveProductDTO.ProductName)" />
    <label class="text-danger">@error</label> 
      </div>

       <div class="col-md-24">
              <FluentButton type="submit" Appearance="Appearance.Accent">Submit</FluentButton></div> 

           

                    


           
                 
                   

            



            </EditForm>
        </FluentCard>
    </div>

</div>

</FluentDesignSystemProvider>




@code {

    [Parameter]
    public int Id { get; set; }
    string error { get; set; }
    public string testValue = "";

    ProductDTO productItem { get; set; } = new ProductDTO();
    SaveProductDTO saveProductDTO { get; set; } = new SaveProductDTO();





    [Inject]
    public ICategoryDataService CategoryDataService { get; set; }
    [Inject]
    public IProductDataService ProductDataService { get; set; }

    async Task OnSubmitProduct()
    {
        error = null;
        try
        {
            await ProductDataService.UpdateProduct(Id, saveProductDTO);
            toastService.ShowToast($"{saveProductDTO.ProductName} added Succesfuly", ToastLevel.Success);
            //  StateHasChanged();
            //    await OnInitializedAsync();
            navigationManager.NavigateTo("/product");



        }
        catch (Exception ex)
        {
            error = ex.Message;
             toastService.ShowToast($"{saveProductDTO.ProductName} failed to add", ToastLevel.Error);
        }
    }
    @functions {

       
       private ProductCategoryDTO[] categories { get; set; }
       
      
      protected override async Task OnInitializedAsync()
    {
          
          
            
          categories = await CategoryDataService.GetCategories();
            productItem = await ProductDataService.GetProductById(Id);
            // toastService.ShowToast($"Items loaded succesfuly", ToastLevel.Info);
    }

      
    }
}
