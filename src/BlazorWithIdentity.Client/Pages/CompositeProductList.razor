@using BlazorWithIdentity.Shared.DTO.CompositeProduct
@page "/composite"

@attribute [Authorize]

@inject IdentityAuthenticationStateProvider authStateProvider

@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@inject HttpClient Http


<h3>Composite Product List</h3>
@if (compositeProducts == null)
{
 <FluentProgressRing></FluentProgressRing>
} else
{ 
    @foreach(var item in compositeProducts){
      
     


    <FluentCard style="width:80%;height:100%" neutral-base-color="#3995C9">
   
         
         <FluentToolbar id="toolbar-fluent-composite-list" style="width:100%">
             <h2 slot="end">KES @item.TotalPrice</h2>
         </FluentToolbar>
     <FluentDivider ></FluentDivider>

              
         
                 @foreach(var product in item.CombinedProducts)
                 {
                      <div class="entity-list ">
        <div class="entity-list-item "  >
          <div class="item-icon">
            <span class="glyph glyph-chevron-right"> </span>
          </div>
          <div class="item-content-secondary">
               @product.SkuValue.SkuValueName
              <div class="content-text-tertiary "> <span class="label label-warning">@product.SkuValue.OptionValue.Option.Product.ProductCategory.Name</span>  </div>
              
          </div>

          <div class="item-content-primary">
              <div class="col-md-18">

                  <div class="content-text-primary ">@product.SkuValue.OptionValue.Option.Product.ProductName </div>
            <div class="content-text-tertiary">@product.SkuValue.OptionValue.OptionValueName - KES @product.Price </div>
            
              </div>
              <div class="col-md-6">
                  <div class="content-text-tertiary ">
                  
              </div>
            
                   

               </div>

              </div>
         </div>
         </div>
   
          

                   
                 
          
                
                   
              
           
                }
                   <FluentDivider ></FluentDivider>
      <FluentDesignSystemProvider >
    <FluentToolbar id="toolbar-fluent-composite-list" style="width:100%;">
             <FluentButton Appearance="Appearance.Filled"  @onclick="(() => DeleteProduct(item.Id))" class="call-to-action btn btn-block "  slot="end"><span class="glyph glyph-delete"></span>Delete</FluentButton>
             
         </FluentToolbar>
   </FluentDesignSystemProvider>

 </FluentCard>
                 




   
















   
    
}




@code {

     CompositeProductDTO compositeProductDTO { get; set; } = new CompositeProductDTO();
  //  ProductCategoryDTO productCategoryDTO { get; set; } = new ProductCategoryDTO();
   
     [Inject]
    public ICompositeProductDataService CompositeProductDataService { get; set; }

    @functions {


        private CompositeProductDTO[] compositeProducts { get; set; }

        protected override async Task OnInitializedAsync()
        {
            
            compositeProducts  = await CompositeProductDataService.GetCompositeProducts();
            await InvokeAsync(() => StateHasChanged())
                        .ConfigureAwait(false);
         
         //  await OnInitializedAsync();
        }
             protected async Task DeleteProduct(int Id)
        {
          await CompositeProductDataService.DeleteCompositeProduct(Id);
          toastService.ShowToast($"Item({Id}) deleted succesfuly", ToastLevel.Success);
            StateHasChanged();
            await OnInitializedAsync();
            //  StatusClass = "alert-success";
          //  Message = "Deleted successfully";

           // Saved = true;
        }

 
  }   

        }
}
