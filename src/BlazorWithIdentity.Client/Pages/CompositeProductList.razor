@using BlazorWithIdentity.Shared.DTO.CompositeProduct
@page "/composite"

@attribute [Authorize]

@inject IdentityAuthenticationStateProvider authStateProvider

@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@inject HttpClient Http

<h3>Composite Product List</h3>
@if (compositeProducts == null)
{
 <fluent-progress-ring></fluent-progress-ring>
} else
{ 
    @foreach(var item in compositeProducts){
      
       
 

  <div class="col-sm-22  ">
   

      <ol class="list-items">
        <li class="list-items-row">
          <div class="col-md-22">
              <div data-toggle="collapse" aria-expanded="false" data-target="#list-item-line-@item.Id">
            <div class="container">
              <div class="row ">
                <div class="col-md-16 type-h5">
                 
                  @foreach(var productLabel in item.CombinedProducts)
                   {
                  <span class="typ-p4 color-type-secondary"> @productLabel.SkuValue.OptionValue.Option.Product.ProductName, </span>
                   }

                </div>
                 <div class="col-md-4 type-h6">
                  <span class="label label-success">KES @item.TotalPrice </span>
                    
                 </div>
                 <div class="col-md-4 type-h6">
                        <i class="glyph glyph-chevron-right"></i>
                  <i class="glyph glyph-chevron-down"></i>
                 </div>

              </div>
              <div class="col-md-12 ">

              </div>
            </div>
          </div>
          <div class="collapse" id="list-item-line-@item.Id">
            <div class="row">
              <div class="col-md-22 color-type-secondary">

                <div class="row">
                 @foreach(var product in item.CombinedProducts)
                 {
                                     
                  <FluentHorizontalScroll class="right-gradient top-align" Speed="600" Easing="ease-in-out" >
            <FluentCard style="width:100%;height:100%" neutral-base-color="#3995C9">
                <div class="contents">
                      <p> @product.SkuValue.OptionValue.Option.Product.ProductName</p> 
           <pre><code class="language-xml">
 {
      "id": @product.Id,
      "price": @product.Price,
      "skuValue": {
        "id": @product.SkuValue.Id,
        "skuValueName": "@product.SkuValue.SkuValueName",
        "optionValue": {
          "id": @product.SkuValue.OptionValue.Id,
          "optionValueName": "@product.SkuValue.OptionValue.OptionValueName",
          "option": {
            "id": @product.SkuValue.OptionValue.Option.Id,
            "optionName": "@product.SkuValue.OptionValue.Option.OptionName",
            "product": {
              "id": @product.SkuValue.OptionValue.Option.Product.Id,
              "productName": "@product.SkuValue.OptionValue.Option.Product.ProductName",
              "productCategory": {
                "id": @product.SkuValue.OptionValue.Option.Product.ProductCategory.Id,
                "name": "@product.SkuValue.OptionValue.Option.Product.ProductCategory.Name"
              }
            }
          }
        } 
    
        </code></pre>
                   
                </div>
            </FluentCard>
       </FluentHorizontalScroll>              }


                 

                </div>



              </div>
            
            </div>
          </div>
           

          </div>
          <div class="col-md-2"> 
               <div class="putbox">
             <div class="putbox-icon">
            <span @onclick="(() => DeleteProduct(item.Id))"  class="glyph glyph-delete"></span>
            </div>
            </div>
               </div>
         
        </li>
        
      </ol>



   


</div>














   
    
}




@code {

     CompositeProductDTO compositeProductDTO { get; set; } = new CompositeProductDTO();
  //  ProductCategoryDTO productCategoryDTO { get; set; } = new ProductCategoryDTO();
   
     [Inject]
    public ICompositeProductDataService CompositeProductDataService { get; set; }

    @functions {


        private CompositeProductDTO[] compositeProducts { get; set; }

        protected override async Task OnInitializedAsync()
        {
            
            compositeProducts  = await CompositeProductDataService.GetCompositeProducts();
            await InvokeAsync(() => StateHasChanged())
                        .ConfigureAwait(false);
         
         //  await OnInitializedAsync();
        }
             protected async Task DeleteProduct(int Id)
        {
          await CompositeProductDataService.DeleteCompositeProduct(Id);
          toastService.ShowToast($"Item({Id}) deleted succesfuly", ToastLevel.Success);
            StateHasChanged();
            await OnInitializedAsync();
            //  StatusClass = "alert-success";
          //  Message = "Deleted successfully";

           // Saved = true;
        }

 
  }   

        }
}

