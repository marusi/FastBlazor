@page "/Category"
@page "/Category/{Id:int}"
@attribute [Authorize]

@inject IdentityAuthenticationStateProvider authStateProvider

@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@inject HttpClient Http
@using BlazorWithIdentity.Shared.DTO.Category


   

      
  <div class="row">
  <div class="container">
   <h6>Categories</h6>
   <div class="col-md-12">
    <FluentCard  style="height:50%">  
   
      @if (categories == null)
         {
            <fluent-progress-ring></fluent-progress-ring>
          }
         else
         {
        
              
  <ol class="list-items">

      <li class="list-items-row">
          <div class="row">
                  <EditForm class="form-category" OnValidSubmit="OnSubmit" Model="saveProductCategoryDTO">
         
      <div class="col-md-12">
       
       <FluentTextField id="inputCategory"  @bind-Value="saveProductCategoryDTO.Name"  placeholder="New Category"  ></FluentTextField>
         <ValidationMessage class="text-danger" For="@(() => saveProductCategoryDTO.Name)" />
       </div>

        <div class="col-md-12">
        <FluentButton type="submit" Appearance="Appearance.Accent">Submit</FluentButton>
            <label class="text-danger">@error</label> 
    
        </div>


 
        </EditForm>
          </div>
      </li>
       @foreach (var item in categories)
       {
        <li class="list-items-row">
            <div class="row">
             


                <div class="col-md-16">
                   @item.Name
                </div>
               
                <div class="col-md-4">
                   <fluent-anchor  Href="@($"categorydata/{item.Id}")" Appearance="Appearance.Stealth"><span style="color:green;" class="glyph glyph-edit"></span></fluent-anchor> 
                 
                </div>
                 <div class="col-md-4">
                    <FluentButton type="submit"   @onclick="(() => DeleteCategory(item.Id))" Appearance="Appearance.Stealth"><span style="color:red;" class="glyph glyph-delete"></span></FluentButton>
                </div>
            </div>
        </li>
        }
    </ol>
    }
    </FluentCard>
  </div>
   <div class="col-md-12">
       


   </div>
  </div>
  </div>

@code{

    // private SuccessNotification _notification;

     [Parameter]
    public int Id { get; set; }
    SaveProductCategoryDTO saveProductCategoryDTO { get; set; } = new SaveProductCategoryDTO();
    string error { get; set; }

    ProductCategoryDTO productCategoryDTO { get; set; } = new ProductCategoryDTO();
   
     [Inject]
    public ICategoryDataService CategoryDataService { get; set; }

    async Task OnSubmit()
    {
        error = null;
        try
        {
            if (saveProductCategoryDTO.Name != null)
            {
                  await CategoryDataService.CreateCategory(saveProductCategoryDTO);
                  toastService.ShowToast($"{saveProductCategoryDTO.Name} added Succesfuly", ToastLevel.Success);
                  StateHasChanged();
                  await OnInitializedAsync();
                  navigationManager.NavigateTo("/category");
            } else
            {
                 toastService.ShowToast($"Kindly, insert category name", ToastLevel.Warning);
            }

            
           

        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
  

  

  @functions {


    private ProductCategoryDTO[] categories { get; set; }
   

    protected override async Task OnInitializedAsync()
    {
       categories = await CategoryDataService.GetCategories();
      // toastService.ShowToast($"Items loaded succesfuly", ToastLevel.Info);
    }

    protected async Task DeleteCategory(int Id)
        {
          await CategoryDataService.DeleteCategory(Id);
          toastService.ShowToast($"Item({Id}) deleted succesfuly", ToastLevel.Success);
            StateHasChanged();
            await OnInitializedAsync();
            //  StatusClass = "alert-success";
          //  Message = "Deleted successfully";

           // Saved = true;
        }

 
  }


     




}

 
