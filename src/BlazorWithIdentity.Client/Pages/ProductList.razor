@using BlazorWithIdentity.Shared.DTO.Category
@using BlazorWithIdentity.Shared.DTO.CompositeProduct
@using BlazorWithIdentity.Shared.DTO.ProductSku
@page "/productlist"



 <FluentDesignSystemProvider>
<div class="row row-sm">
   
        
       
    <fluent-toolbar id="toolbar-fluent-product-list" style="width:100%">
        <div class="putbox">
             
        <div class="putbox-icon">
            <span  class="glyph glyph-filter"></span>
            
        </div>
        <div class="putbox-content">
            <div class="content-title">Filter products by category:</div>
            <form class="content-form">
              
                 @if (categories == null){} else {
                       if (testValue == null){ } 
                       else {
                           int number;
                           int.TryParse(testValue, out number);
                           query.CategoryId = number;
                        }
                  <FluentSelect   @onclick="OnFilterProducts"   @bind-value="testValue">
                  <FluentOption Value="0">All Products</FluentOption>
                    @foreach (var item in categories)
                    {
                        <FluentOption Value="@item.Id.ToString()">@item.Name</FluentOption>
                    }
                   </FluentSelect>

          }
                
            </form>
           
        </div>
        </div>
        
        
         <fluent-menu  slot="end">
         <fluent-menu-item @onclick="@Toggle" role="menuitem">
             <b hidden="@(!HideLabel)">
                <span class="glyph glyph-multi-select"> </span>
                Open Select
             </b>
             <b hidden="@HideLabel">
                 <span class="glyph glyph-hide-bcc"> </span>
                 Hide Select
             </b>
             </fluent-menu-item>
         <fluent-menu-item @onclick="@ToggleAction" role="menuitem">            
             <b hidden="@(!HideAction)">
                 <span class="glyph glyph-edit"> </span>
                 Edit & Delete
                 <span class="glyph glyph-delete"> </span>
            </b>
             <b hidden="@HideAction">
              <span class="glyph glyph-view"> </span>
                 View only
             </b>
         </fluent-menu-item>
         <fluent-divider></fluent-divider>
         
           <fluent-button style="width:100%;" appearance="accent" Disabled=@(IsDisabled)  
            @onclick="(() => ListUpdated())">Create Composite </fluent-button> 
      
         </fluent-menu>

       
       
    </fluent-toolbar>

    

     <div class="col-md-18">
         
         <ol class="list-items">

  @if (productSkus == null)
{
   <li class="list-items-row">
       <fluent-progress-ring></fluent-progress-ring>
  </li>
} else
{

      
    @foreach (var item in productSkus.Items)
    {
       <li class="list-items-row" >
    <div class="row">
        <div class="col-md-1">
            <div hidden="@HideLabel">
                
               <div class="flag-indeterminate" >
                <label>
                 
                    @if (@item.Id > 0)
                    {
                       <input  name="AreChecked" type="checkbox" 
                            value="@item.Id" 
                            @onchange = "eventArgs => { CheckChanged
                            (saveCompositeProductDTO, eventArgs.Value, item.Id, item.Price);
                            }"
                                />
                                                          
                    }
                     else
                     {
                       <input name="AreChecked" type="checkbox" value="@item.Id"  checked @onchange="eventArgs => { CheckChanged 
           (saveCompositeProductDTO, eventArgs.Value, item.Id,item.Price);}"/>  
                     
                     }
                    <span></span>
                </label>
            </div>
                
            </div>

            <div hidden="@(!HideLabel)"></div>
             
        </div>
        <div class="col-md-18">
      <div class="entity-list ">
        <div class="entity-list-item "  >
          <div class="item-icon">
            <span class="glyph glyph-chevron-right"> </span>
          </div>
          <div class="item-content-secondary">
               @item.SkuValue.SkuValueName
              <div class="content-text-tertiary "> <span class="label label-warning">@item.SkuValue.OptionValue.Option.Product.ProductCategory.Name</span>  </div>
              
          </div>

          <div class="item-content-primary">
              <div class="col-md-18">

                  <div class="content-text-primary ">@item.SkuValue.OptionValue.Option.Product.ProductName </div>
            <div class="content-text-tertiary">@item.SkuValue.OptionValue.OptionValueName - KES @item.Price </div>
            
              </div>
              <div class="col-md-6">
                  <div class="content-text-tertiary ">
                  
              </div>
            
                   

               </div>

          </div>


        </div>
      </div>
      </div>
      <div class="col-md-4">
          <div hidden="@HideAction">
           <div class="col-md-12">
                   <fluent-anchor  Href="@($"productskudata/{item.Id}")" Appearance="Appearance.Stealth"><span style="color:green;" class="glyph glyph-edit"></span></fluent-anchor> 
                 
                </div>
                 <div class="col-md-12">
                    <FluentButton type="submit"   @onclick="(() => DeleteProductSku(item.Id))" Appearance="Appearance.Stealth"><span style="color:red;" class="glyph glyph-delete"></span></FluentButton>
                </div>
          </div>
          <div hidden="@(!HideAction)">
          </div>

      </div>
      <div class="col-md-1"></div>

    </div>
  </li>
    }
   <li>



 
   </li>
   

}

 
</ol>
         
         
         </div>




</div>

  </FluentDesignSystemProvider>  







@code {

    ProductSkuDTO productSkuValueDTO { get; set; } = new ProductSkuDTO();
    ProductSkuQueryDTO query { get; set; } = new ProductSkuQueryDTO
    {
        
    
    };
    
    
    
    protected bool IsDisabled = true;
    private bool HideLabel   = true;
    private bool HideAction   = true;
   
    string error { get; set; }
     [Inject]
    public IProductSkuDataService ProductSkuDataService { get; set; }
    [Inject]
    public ICompositeProductDataService CompositeProductDataService { get; set; }

      [Inject]
    public ICategoryDataService CategoryDataService { get; set; }


    @functions {

        // private ProductSkuDTO[] productSkus { get; set; }
        private QueryResultDTO<ProductSkuDTO> productSkus { get; set; }
        private ProductCategoryDTO[] categories { get; set; }

        [Parameter]
        public int Id { get; set; }

        public string testValue = "";

        SaveCompositeProductDTO saveCompositeProductDTO { get; set; } = new SaveCompositeProductDTO();
        string errorTwo { get; set; }
        protected override async Task OnInitializedAsync()
        {

            await   OnFilterProducts();
            categories = await CategoryDataService.GetCategories();




        }

         private void Toggle()
         {
            HideLabel =   !HideLabel;
            if (HideLabel) {  
              //  saveCompositeProductDTO.CombinedProducts.Clear();
              //  saveCompositeProductDTO.TotalPrice = 0;
              // logic to remove checkboxes
            }
         } 
         private void ToggleAction()
         {
            HideAction =   !HideAction;
            
          }

        protected void CheckChanged(SaveCompositeProductDTO saveProduct,
                                     object checkValue, int id, decimal price)
        {

            int number = 0;
            if (id > number)
            {
                number = (int)id;
                // saveProduct = await CompositeProductDataService.CreateCompositeProduct(saveCompositeProductDTO);
                if((bool)checkValue)
                {
                  
                    saveCompositeProductDTO.CombinedProducts.Add(number);
                    saveCompositeProductDTO.CombinedProducts.ToList();
                    saveCompositeProductDTO.TotalPrice += price;
                    Console.WriteLine($"First total: {saveCompositeProductDTO.TotalPrice}");
                    @if (saveCompositeProductDTO.CombinedProducts.Count > 1)
                    {
                      IsDisabled = false;  
                    }


                    //  await CompositeProductDataService.CreateCompositeProduct(saveProduct);
                    //  toastService.ShowToast($"Product Created Succesfuly", ToastLevel.Success);
                } else 
                {
                    saveCompositeProductDTO.TotalPrice = saveCompositeProductDTO.TotalPrice - price;
                    saveCompositeProductDTO.CombinedProducts.Remove(number);
                    @if (saveCompositeProductDTO.CombinedProducts.Count < 2)
                    {
                      IsDisabled = true;  
                    }

                    Console.WriteLine($"Last total: {saveCompositeProductDTO.TotalPrice}");



                }
            } else {

            }

        }


        async Task ListUpdated()
        {
            await CompositeProductDataService.CreateCompositeProduct(saveCompositeProductDTO);
            toastService.ShowToast($"Products Created Succesfuly", ToastLevel.Success);
            saveCompositeProductDTO.CombinedProducts.Clear();

            saveCompositeProductDTO.TotalPrice = 0;

            navigationManager.NavigateTo("/composite");
        }
        private  async Task OnFilterProducts()
        {
            var props = GetProperties(query);
            foreach (var prop in props)
            {
                if (prop.Key != "CategoryId")
                {
                    // productSkus = await ProductSkuDataService.GetProductSkus("");  
                } else if (prop.Key == "CategoryId") {
                    if(query.CategoryId == 0)
                    {
                        var allProducts = $""; // pass empty string to have api call no query at all
                        productSkus = await ProductSkuDataService.GetProductSkus(allProducts);
                    } else
                    {
                       var queryValue = $"{prop.Key}={prop.Value}";
                       productSkus = await ProductSkuDataService.GetProductSkus(queryValue);   
                    }
                    

                 //   await OnInitializedAsync();
                    // await OnFilterProducts();
                 
                 
                 } else if (prop.Key == "OptionValueId") {

                    var combined = $"{prop.Key}={prop.Value}";
                    productSkus = await ProductSkuDataService.GetProductSkus(combined);
                }
		}
        }

        private static Dictionary<string, string> GetProperties(object obj)
	{
		var props = new Dictionary<string, string>();
		if (obj == null)
			return props;

		var type = obj.GetType();
		foreach (var prop in type.GetProperties())
		{
			var val = prop.GetValue(obj, new object[] { });
			var valStr = val == null ? "" : val.ToString();
			props.Add(prop.Name, valStr);
		}

		return props;
	}


  protected async Task DeleteProductSku(int Id)
        {
          await ProductSkuDataService.DeleteProductSku(Id);
          toastService.ShowToast($"Item({Id}) deleted succesfuly", ToastLevel.Success);
            StateHasChanged();
            await OnInitializedAsync();
            //  StatusClass = "alert-success";
          //  Message = "Deleted successfully";

           // Saved = true;
        }


     

            

 }
}