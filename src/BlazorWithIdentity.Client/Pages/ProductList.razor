@using BlazorWithIdentity.Shared.DTO.Category
@using BlazorWithIdentity.Shared.DTO.CompositeProduct
@using BlazorWithIdentity.Shared.DTO.ProductSku

<div class="row row-sm">
   
        <h6>Product List</h6>
     <div class="col-md-12">
       @*Pagination*@
     </div>
     <div class="col-md-12">

         <div class="form-group">
         <div class="putbox-content">
         <div class="content-title">Categories Filter</div>
          <div class="combobox">

         @if (categories== null)  {  } else
           {
             
              <select  class="form-control" @onclick="OnFilterProducts"   @bind="query.CategoryId">
                  <option value="">All Products</option>
                 @foreach (var item in categories)
                  {
                     <option value="@item.Id">@item.Name</option>
                   }
             </select>
          }
  
      
      </div>

      </div>
    


    
         </div>
       
     </div>

     <div class="col-md-24">
         
         <ol class="list-items">

  @if (productSkus == null)
{
   <li class="list-items-row">
       <div class="entity-list ">
        <div class="entity-list-item "  >
          <div class="item-icon">
            <span class="glyph glyph-warning"></span>
          </div>
           <div class="item-content-secondary">
              <div class="content-text-tertiary "> <span class="label label-danger">Nothing here</span>  </div>
          </div>
           <div class="content-text-tertiary ">
                  <div class="progress-bar">
      <div class="progress-circle"></div>
      <div class="progress-circle"></div>
      <div class="progress-circle"></div>
      <div class="progress-circle"></div>
      <div class="progress-circle"></div>
    </div>
            </div>
          </div>
          </div>
  </li>
} else
{

      
    @foreach (var item in productSkus.Items)
    {
       <li class="list-items-row" >
    <div class="row">
      <div class="entity-list ">
        <div class="entity-list-item "  >
          <div class="item-icon">
            <span class="glyph glyph-chevron-right"> </span>
          </div>
          <div class="item-content-secondary">
               @item.SkuValue.SkuValueName
              <div class="content-text-tertiary "> <span class="label label-warning">@item.SkuValue.OptionValue.Option.Product.ProductCategory.Name</span>  </div>
              
          </div>

          <div class="item-content-primary">
              <div class="col-md-18">

                  <div class="content-text-primary ">@item.SkuValue.OptionValue.Option.Product.ProductName </div>
            <div class="content-text-secondary">@item.SkuValue.OptionValue.OptionValueName - KES @item.Price </div>
            
              </div>
              <div class="col-md-6">
                  <div class="content-text-tertiary ">
                   <div class="checkbox">
                <label>
                 
                    @if (@item.Id > 0)
                    {
                          <input name="AreChecked" type="checkbox" 
                            value="@item.Id" 
                            @onchange = "eventArgs => { CheckChanged
                            (saveCompositeProductDTO, eventArgs.Value, item.Id, item.Price);
                            }"
                                />                                 
                    }
                     else
                     {
                         
                     <input name="AreChecked" type="checkbox" 
                            value="@item.Id"  checked 
                            @onchange="eventArgs => { CheckChanged (saveCompositeProductDTO, eventArgs.Value, item.Id,item.Price);}"
                            
                              />
                     }
                    <span>Pick</span>
                </label>
            </div>
              </div>
            
                   

               </div>

          </div>


        </div>
      </div>

    </div>
  </li>
    }
   <li>

 <button disabled=@(IsDisabled) class="btn btn-secondary" @onclick="(() => ListUpdated())">Create Composite Selection</button>  
   </li>
   

}

 
</ol>
         
         
         </div>

    


</div>












@code {

    ProductSkuDTO productSkuValueDTO { get; set; } = new ProductSkuDTO();
    ProductSkuQueryDTO query { get; set; } = new ProductSkuQueryDTO();

    protected bool IsDisabled = true;
  
    string error { get; set; }
     [Inject]
    public IProductSkuDataService ProductSkuDataService { get; set; }
    [Inject]
    public ICompositeProductDataService CompositeProductDataService { get; set; }

      [Inject]
    public ICategoryDataService CategoryDataService { get; set; }


    @functions {

        // private ProductSkuDTO[] productSkus { get; set; }
        private QueryResultDTO<ProductSkuDTO> productSkus { get; set; }
        private ProductCategoryDTO[] categories { get; set; }

        [Parameter]
        public int Id { get; set; }

        SaveCompositeProductDTO saveCompositeProductDTO { get; set; } = new SaveCompositeProductDTO();
        string errorTwo { get; set; }
        protected override async Task OnInitializedAsync()
        {

            await   OnFilterProducts();
            categories = await CategoryDataService.GetCategories();




        }



        protected void CheckChanged(SaveCompositeProductDTO saveProduct,
                                     object checkValue, int id, decimal price)
        {

            int number = 0;
            if (id > number)
            {
                number = (int)id;
                // saveProduct = await CompositeProductDataService.CreateCompositeProduct(saveCompositeProductDTO);
                if((bool)checkValue)
                {
                  
                    saveCompositeProductDTO.CombinedProducts.Add(number);
                    saveCompositeProductDTO.CombinedProducts.ToList();
                    saveCompositeProductDTO.TotalPrice += price;
                    Console.WriteLine($"First total: {saveCompositeProductDTO.TotalPrice}");
                    @if (saveCompositeProductDTO.CombinedProducts.Count > 1)
                    {
                      IsDisabled = false;  
                    }


                    //  await CompositeProductDataService.CreateCompositeProduct(saveProduct);
                    //  toastService.ShowToast($"Product Created Succesfuly", ToastLevel.Success);
                } else 
                {
                    saveCompositeProductDTO.TotalPrice = saveCompositeProductDTO.TotalPrice - price;
                    saveCompositeProductDTO.CombinedProducts.Remove(number);
                    @if (saveCompositeProductDTO.CombinedProducts.Count < 2)
                    {
                      IsDisabled = true;  
                    }
                    
                    Console.WriteLine($"Last total: {saveCompositeProductDTO.TotalPrice}");
                    
                    
                    
                }
            } else {
                    
            }

        }


        async Task ListUpdated()
        {
            await CompositeProductDataService.CreateCompositeProduct(saveCompositeProductDTO);
            toastService.ShowToast($"Products Created Succesfuly", ToastLevel.Success);
            saveCompositeProductDTO.CombinedProducts.Clear();

            saveCompositeProductDTO.TotalPrice = 0;
         
            navigationManager.NavigateTo("/composite");
        }
        private  async Task OnFilterProducts()
        {
              var props = GetProperties(query);
            foreach (var prop in props)
		{
                if (prop.Key != "CategoryId")
                {
                 // productSkus = await ProductSkuDataService.GetProductSkus("");  
                } else if (prop.Key == "CategoryId") {

                    var combined = $"{prop.Key}={prop.Value}";
                    productSkus = await ProductSkuDataService.GetProductSkus(combined);

                 //   await OnInitializedAsync();
                    // await OnFilterProducts();
                 
                 
                 } else if (prop.Key == "OptionValueId") {

                    var combined = $"{prop.Key}={prop.Value}";
                    productSkus = await ProductSkuDataService.GetProductSkus(combined);
                }
		}
        }

        private static Dictionary<string, string> GetProperties(object obj)
	{
		var props = new Dictionary<string, string>();
		if (obj == null)
			return props;

		var type = obj.GetType();
		foreach (var prop in type.GetProperties())
		{
			var val = prop.GetValue(obj, new object[] { });
			var valStr = val == null ? "" : val.ToString();
			props.Add(prop.Name, valStr);
		}

		return props;
	}


  

     

            

 }
}