

@page "/product"

@attribute [Authorize]

@inject IdentityAuthenticationStateProvider authStateProvider

@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@inject HttpClient Http
@using BlazorWithIdentity.Shared.DTO.Category
@using BlazorWithIdentity.Shared.DTO.Product

<FluentDesignSystemProvider>
 <div class="row">
 <div class="container">
   <h6>Product Name</h6>
   <div class="col-md-12">
    <FluentCard  style="height:50%">  
    
   
      @if (products == null)
         {
            
             <FluentProgressRing></FluentProgressRing>
               
          }
        
         else
         {
            
                 
                            <div class="row">
                              <EditForm class="form-category" OnValidSubmit="OnSubmit" Model="saveProductDTO">
                                  <div class="col-md-24">
                                      <div class="col-md-12">
                                          <p>Choose Category</p>
                                                @if (testValue == null) { } else
                                                {
                                                    int bindValue;
                                                    int.TryParse(testValue, out bindValue);
                                                    saveProductDTO.ProductCategoryId = bindValue;
                                                }
                                                <FluentSelect  class="form-control" id="category" @bind-Value="testValue">
                                                  
                                                    @foreach (var item in categories)
                                                    {
                                                        <FluentOption Value="@item.Id.ToString()">@item.Name</FluentOption>
                                                    }
                                                </FluentSelect>
                                               
                                                <br/>
                                      </div>
                                      <div class="col-md-12"></div>
                                     
                                  </div> 
                                  
                                  <div class="col-md-12">
                                       
                                              
                                                   
                                                        <FluentTextField id="inputCategory"  @bind-Value="saveProductDTO.ProductName"  placeholder="New Product"  ></FluentTextField>
                                                            <ValidationMessage class="text-danger" For="@(() => saveProductDTO.ProductName)" />

                                                     </div>
                                                     <div class="col-md-12">
                                                        <FluentButton type="submit" Appearance="Appearance.Accent">Submit</FluentButton>
                                                    
                                                      <label class="text-danger">@error</label> 
                                                 </div>
                                         
                                   </EditForm>
                           </div>
                     
                     <FluentDataGrid id="manualGrid" GenerateHeader=GenerateHeaderOptions.None GridTemplateColumns="1fr 1fr" TItem=string>
                      <FluentDataGridRow TItem=string RowType="DataGridRowType.Header">
                       <FluentDataGridCell GridColumn=1 CellType="DataGridCellType.ColumnHeader">Name</FluentDataGridCell>
                        <FluentDataGridCell GridColumn=2 CellType="DataGridCellType.ColumnHeader">Edit</FluentDataGridCell>
                        <FluentDataGridCell GridColumn=3 CellType="DataGridCellType.ColumnHeader">Delete</FluentDataGridCell>
                      </FluentDataGridRow>
                      @foreach (var item in products)
                        {
                             <FluentDataGridRow TItem=string>
                            <FluentDataGridCell GridColumn=1>
                               <FluentBreadcrumb>
                                       <FluentBreadcrumbItem Href="@($"categorydata/{@item.ProductCategory.Id}")">
                                              @item.ProductCategory.Name
                                        </FluentBreadcrumbItem>
    
                                    <FluentBreadcrumbItem>@item.ProductName</FluentBreadcrumbItem>
                                    </FluentBreadcrumb>
                            
                            
                            </FluentDataGridCell>
                            <FluentDataGridCell GridColumn=2>   <FluentAnchor  Href="@($"productdata/{item.Id}")" Appearance="Appearance.Stealth"><span style="color:green;" class="glyph glyph-edit"></span></FluentAnchor>  </FluentDataGridCell>
                              <FluentDataGridCell GridColumn=3> <FluentButton type="submit"   @onclick="(() => DeleteProduct(item.Id))" Appearance="Appearance.Stealth"><span style="color:red;" class="glyph glyph-delete"></span></FluentButton></FluentDataGridCell>
                                </FluentDataGridRow>
                          }
                      </FluentDataGrid>
                              
                                   
                   

}
             </FluentCard>

     </div>
     <div class="col-md-12"> </div>
 </div>
 </div>
 </FluentDesignSystemProvider>

@code{

    // private SuccessNotification _notification;

    [Parameter]
    public int Id { get; set; }
    private string testValue = "";
    SaveProductDTO saveProductDTO { get; set; } = new SaveProductDTO();
    string error { get; set; }

    ProductDTO productDTO { get; set; } = new ProductDTO();
  //  ProductCategoryDTO productCategoryDTO { get; set; } = new ProductCategoryDTO();
   
     [Inject]
    public IProductDataService ProductDataService { get; set; }

      [Inject]
    public ICategoryDataService CategoryDataService { get; set; }

    async Task OnSubmit()
    {
        error = null;
        try
        {
            await ProductDataService.CreateProduct(saveProductDTO);
            toastService.ShowToast($"{saveProductDTO.ProductName} added Succesfuly", ToastLevel.Success);
            StateHasChanged();
             await OnInitializedAsync();
            navigationManager.NavigateTo("/product");
            
           

        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
  

  

  @functions {


        private ProductDTO[] products { get; set; }
        private ProductCategoryDTO[] categories { get; set; }


    protected override async Task OnInitializedAsync()
    {
       products = await ProductDataService.GetProducts();
       categories = await CategoryDataService.GetCategories();


      // toastService.ShowToast($"Items loaded succesfuly", ToastLevel.Info);
    }

    protected async Task DeleteProduct(int Id)
        {
          await ProductDataService.DeleteProduct(Id);
          toastService.ShowToast($"Item({Id}) deleted succesfuly", ToastLevel.Success);
            StateHasChanged();
            await OnInitializedAsync();
            //  StatusClass = "alert-success";
          //  Message = "Deleted successfully";

           // Saved = true;
        }

 
  }


     




}

 
