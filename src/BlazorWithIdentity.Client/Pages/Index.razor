@page "/"
@attribute [Authorize]

@using Microsoft.Fast.Components.FluentUI
@inject ToastService toastService

@inject IJSRuntime JS

<AuthorizeView>
    <Authorized>
<div class="container">
  <div class="row">
   

  <h1>Call JS Example 2</h1>

<p>
    <button @onclick="SetStock">Set Stock</button>
</p>

@if (stockSymbol is not null)
{
    <p>@stockSymbol price: @price.ToString("c")</p>
    <input @ref="inputElement" type="number" bind="@price.ToString("c")" />
} 

<ProductList /> 

  </div>
</div>

       
    </Authorized>
    <Authorizing>
        <h1>Loading ...</h1>
    </Authorizing>
</AuthorizeView>

@code {
     private Random r = new();
    private string? stockSymbol;
    private decimal price;
    private ElementReference inputElement { get; set; }
    protected override void OnInitialized()
    {
             
               JS.InvokeVoidAsync("interop.watch",  DotNetObjectReference.Create(this));
    }
    @functions{
        private async Task SetStock()
        {
            stockSymbol = 
                $"{(char)('A' + r.Next(0, 26))}{(char)('A' + r.Next(0, 26))}";
            price = r.Next(1, 101);
            await JS.InvokeVoidAsync("displayTickerAlert", stockSymbol, price);
            await JS.InvokeVoidAsync("interop.getProperty", stockSymbol);
            await JS.InvokeVoidAsync("interop.setProperty", stockSymbol, price);
            await JS.InvokeVoidAsync("interop.setFocus", inputElement);
            OnInitialized();
            await UpdateCounter();
        }

        [JSInvokable]
        public Task UpdateCounter()
        {
            this.StateHasChanged();
            toastService.ShowToast($"Task Completed: {Task.CompletedTask}", ToastLevel.Success);
            return Task.CompletedTask;
        }
    }
}